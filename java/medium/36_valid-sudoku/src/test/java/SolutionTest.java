import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

import java.util.stream.Stream;

/**
 * @author Marius Gaigalas on 26/09/2024
 */
class SolutionTest {
    @ParameterizedTest(name = "{0}")
    @MethodSource("argumentSource")
    void isValidSudoku(String name, Args args, Expectations want) {
        Assertions.assertEquals(want.want, new Solution().isValidSudoku(args.board));
    }

    static Stream<Arguments> argumentSource() {
        return Stream.of(
                Arguments.of(
                        """
                                case: board =\s
                                [["5","3",".",".","7",".",".",".","."],
                                ["6",".",".","1","9","5",".",".","."],
                                [".","9","8",".",".",".",".","6","."],
                                ["8",".",".",".","6",".",".",".","3"],
                                ["4",".",".","8",".","3",".",".","1"],
                                ["7",".",".",".","2",".",".",".","6"],
                                [".","6",".",".",".",".","2","8","."],
                                [".",".",".","4","1","9",".",".","5"],
                                [".",".",".",".","8",".",".","7","9"]]""",
                        new Args(new char[][]{
                                {'5', '3', '.', '.', '7', '.', '.', '.', '.'},
                                {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
                                {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
                                {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
                                {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
                                {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
                                {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
                                {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
                                {'.', '.', '.', '.', '8', '.', '.', '7', '9'}}),
                        new Expectations(true)),
                Arguments.of(
                        """
                                case: board =\s
                                [["8","3",".",".","7",".",".",".","."],
                                ["6",".",".","1","9","5",".",".","."],
                                [".","9","8",".",".",".",".","6","."],
                                ["8",".",".",".","6",".",".",".","3"],
                                ["4",".",".","8",".","3",".",".","1"],
                                ["7",".",".",".","2",".",".",".","6"],
                                [".","6",".",".",".",".","2","8","."],
                                [".",".",".","4","1","9",".",".","5"],
                                [".",".",".",".","8",".",".","7","9"]]""",
                        new Args(new char[][]{
                                {'8', '3', '.', '.', '7', '.', '.', '.', '.'},
                                {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
                                {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
                                {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
                                {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
                                {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
                                {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
                                {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
                                {'.', '.', '.', '.', '8', '.', '.', '7', '9'}}),
                        new Expectations(false)),
                Arguments.of(
                        """
                                case: board =\s
                                [[".",".","4",".",".",".","6","3","."],
                                [".",".",".",".",".",".",".",".","."],
                                ["5",".",".",".",".",".",".","9","."],
                                [".",".",".","5","6",".",".",".","."],
                                ["4",".","3",".",".",".",".",".","1"],
                                [".",".",".","7",".",".",".",".","."],
                                [".",".",".","5",".",".",".",".","."],
                                [".",".",".",".",".",".",".",".","."],
                                [".",".",".",".",".",".",".",".","."]]""",
                        new Args(new char[][]{
                                {'.', '.', '4', '.', '.', '.', '6', '3', '.'},
                                {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
                                {'5', '.', '.', '.', '.', '.', '.', '9', '.'},
                                {'.', '.', '.', '5', '6', '.', '.', '.', '.'},
                                {'4', '.', '3', '.', '.', '.', '.', '.', '1'},
                                {'.', '.', '.', '7', '.', '.', '.', '.', '.'},
                                {'.', '.', '.', '5', '.', '.', '.', '.', '.'},
                                {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
                                {'.', '.', '.', '.', '.', '.', '.', '.', '.'}}),
                        new Expectations(false)));
    }

    record Args(char[][] board) {
    }

    record Expectations(boolean want) {
    }
}